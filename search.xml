<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Vue渲染函数]]></title>
      <url>/2018/01/31/Vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="Vue-渲染函数"><a href="#Vue-渲染函数" class="headerlink" title="Vue 渲染函数"></a>Vue 渲染函数</h1><p><img src="https://www.lifeofpix.com/wp-content/uploads/2018/04/Old-Harry-Rocks-1600x2000.jpg" alt="" style="width:100%"></p>
<a id="more"></a>
<h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><p>Vue 通过建立一个虚拟 DOM 对真实 DOM 发生的变化保持追踪。请看一下这行代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="keyword">this</span>.blogTitle)</span><br></pre></td></tr></table></figure>
<p><code>createElement</code> 到底会返回什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 <code>createNodeDescription</code>，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p>
<h2 id="createElement-参数"><a href="#createElement-参数" class="headerlink" title="createElement 参数"></a><code>createElement</code> 参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @returns &#123;VNode&#125;</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者一个返回值</span></span><br><span class="line">  <span class="comment">// 类型为 String/Object 的函数，必要参数</span></span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 这样，您可以在 template 中使用这些属性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 或使用字符串来生成“文本节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">'先写一些文字'</span>,</span><br><span class="line">    createElement(<span class="string">'h1'</span>, <span class="string">'一则头条'</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">'foobar'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="createElement-Object-详细属性"><a href="#createElement-Object-详细属性" class="headerlink" title="createElement Object 详细属性"></a><code>createElement</code> Object 详细属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// Scoped slots in the form of</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解React生命周期]]></title>
      <url>/2017/12/01/%E7%90%86%E8%A7%A3React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h1 id="理解-React-生命周期"><a href="#理解-React-生命周期" class="headerlink" title=" 理解 React 生命周期"></a> 理解 React 生命周期</h1><p><img src="https://www.lifeofpix.com/wp-content/uploads/2018/04/Glen-Etive-1600x1067.jpg" alt="" style="width:100%"></p>
<a id="more"></a>
<p>React 组件的生命周期有三个主要场景：</p>
<ul>
<li><strong>装载（Mounting）</strong>：组件被插入到 DOM 中；</li>
<li><strong>更新（Updating）</strong>：组件重新渲染以更新 DOM；</li>
<li><strong>卸载（Unmounting）</strong>：组件从 DOM 中移除。</li>
</ul>
<p>不同的场景会调用不同的生命周期方法，包含 <code>will</code> 的方法在某个时间节点之前执行，包含 did 方法在某个时间节点之后执行。</p>
<h2 id="初始渲染（装载）"><a href="#初始渲染（装载）" class="headerlink" title=" 初始渲染（装载）"></a> 初始渲染（装载）</h2><p><strong>getDefaultProps</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object getDefaultProps()</span><br></pre></td></tr></table></figure>
<p>该方法在 <strong>组件创建时（createClass）</strong> 执行一次并缓存返回值。如果组件使用时未设置属性，就从缓存中读取默认属性。<strong>注意：</strong> <code>getDefaultProps()</code> 返回的缓存数据会在所有实例间共享。</p>
<blockquote>
<p>注意：<br><code>getDefaultProps</code> 在任何实例创建之前执行，不在装载阶段执行，放在这里只是为了方便理解 React 组件初始化流程。</p>
</blockquote>
<p><strong>getInitialState</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object getInitialState()</span><br></pre></td></tr></table></figure>
<p>组件装载之前执行一次，返回值用作 <code>this.state</code> 的初始值。</p>
<p><strong>componentWillMount</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> componentWillMount();</span><br></pre></td></tr></table></figure>
<p>初始渲染之前执行一次，前后端都有。如果在该方法中调用 <code>setState</code>，<code>render()</code> 将接收到更新后的数据，并且只会执行一次（即使状态已经改变）。</p>
<p><strong>componentDidMount</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> componentDidMount();</span><br></pre></td></tr></table></figure>
<p>初始渲染完成后立即执行一次，只在客户端执行（服务器端没有）。</p>
<p>子组件的 <code>componentDidMount()</code> 方法先于父组件之前执行，此时可以操作子组件的任何引用（如操作子组件 DOM）。</p>
<p>在此方法中可进行：</p>
<ul>
<li>与其他 JavaScript 框架集成，如初始化 jQuery 插件；</li>
<li>使用 <code>setTimeout/setInterval</code> 设置定时器；</li>
<li>通过 Ajax/Fetch 获取数据；</li>
<li>绑定 DOM 事件；</li>
<li>……</li>
</ul>
<h2 id="更新"><a href="#更新" class="headerlink" title=" 更新"></a> 更新</h2><p>更新会在 React 组件初始渲染之后、卸载之前多次发生，属性、状态改变都会触发更新。</p>
<p><strong>componentWillReceiveProps</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> componentWillReceiveProps(</span><br><span class="line">  object nextProps, object nextContext</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>组件即将接收新属性之前执行，初始渲染不执行。</p>
<p>该方法用于比较当前属性（<code>this.props</code>）和新属性（<code>nextProps</code>），以便决定是否通过 <code>this.setState()</code>进行状态转换。此方法中调用 <code>this.setState()</code> 不会触发额外的渲染。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    likesIncreasing: nextProps.likeCount &gt; <span class="keyword">this</span>.props.likeCount</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<br>一个常犯的错误是编写此方法内的代码时，假定属性已经改变。也就是说，即使属性没有改变，React 仍会在后续更新时执行此方法，所以在编写相关逻辑时，应该先判断属性是否发生改变。更多细节可<a href="https://reactjs.org/blog/2016/01/08/A-implies-B-does-not-imply-B-implies-A.html" target="_blank" rel="noopener">参见此文</a>。</p>
</blockquote>
<p><strong>shouldComponentUpdate</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boolean shouldComponentUpdate(</span><br><span class="line">  object nextProps, object nextState, object nextContext</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>组件接收到新属性或状态时执行，初始渲染及调用 <code>forceUpdate</code> 时不执行。</p>
<p>通过比较 <code>this.props</code> 与 <code>nextProps</code> 及 <code>this.state</code> 与 <code>nextState</code>，如果确定新属性、状态无需更新组件，则可以返回 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, nextState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nextProps.id !== <span class="keyword">this</span>.props.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>shouldComponentUpdate</code> 返回 <code>false</code>，此次更新的将跳过 <code>render()</code>，此外，<code>componentWillUpdate</code> 和 <code>componentDidUpdate</code>也不会执行。</p>
<p><code>shouldComponentUpdate</code> 默认始终返回<code>true</code>，以保证组件渲染与状态同步。</p>
<p>如果遇到性能瓶颈，尤其是有成百上千组件时，可以考虑使用 <code>shouldComponentUpdate</code> 优化应用。</p>
<p><strong>componentWillUpdate</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> componentWillUpdate(</span><br><span class="line">  object nextProps, object nextState, object nextContext</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>组件接收到新属性或状态即将重新渲染之前执行，初始渲染不执行。</p>
<blockquote>
<p>注意：<br>不能在此方法里使用 <code>this.setState()</code>。如果需要更新状态以响应属性变化，使用 <code>componentWillReceiveProps</code> 替代之。</p>
</blockquote>
<p><strong>componentDidUpdate</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> componentDidUpdate(</span><br><span class="line">  object prevProps, object prevState, object prevContext</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>组件更新后立即执行，初始渲染不执行。可用作操作发生变化 DOM 的时机。</p>
<p>##卸载##</p>
<p><strong>componentWillUnmount</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> componentWillUnmount();</span><br></pre></td></tr></table></figure>
<p>组件即将从 DOM 中卸载之前执行，可在此进行定时器清除、事件解绑等清理工作。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p><img src="https://" alt="" style="width:100%"></p>
<ul>
<li>GitHub:  <a href="https://github.com/ZNspace" target="_blank" rel="noopener">https://github.com/ZNspace</a></li>
<li>Email: <a href="mailto:zhounan.dev@gmail.com" target="_blank" rel="noopener">zhounan.dev@gmail.com</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
